package kr.spring.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import kr.spring.entity.Book;
import kr.spring.mapper.BookMapper;
@RequestMapping("/book")
@RestController
public class BookRestController {
	
	// RestControler
	// 비동기 방식의 일만 처리하는 Controller
	// Rest전송방식을 처리할 수 있다.
	// -요청 url + 전송방식(상태)를 묶어서 처리 가능
	// 사용하는 이유 -url 통일성 및 단순화
	
	@Autowired
	private BookMapper mapper; //MyBatis한테 JDBC 실행하게 요청하는 객체

	@GetMapping("/all")
	  public @ResponseBody List<Book> BookList(){
		  System.out.println("게시글 전제보기 기능");
		  List<Book> list =mapper.getLists();
		  return list;
	  }
	@PostMapping("/new")
	  public @ResponseBody void BookInsert(Book Book) {
		  System.out.println("책 추가 기능 수행");
		  mapper.bookInsert(Book);
		  
	  }
	
	
	  @DeleteMapping("/{num}")
	  public @ResponseBody void BookDelete(@PathVariable("num") int num) {
		  System.out.println("게시글 삭제 기능");
		  mapper.bookDelete(num);
	  }
	  
	  @PostMapping("/{num}")
	  public @ResponseBody Book getBook(@PathVariable("num") int num) {
		  System.out.println("책 정보 얻기");
		  Book book = mapper.getBook(num);
		  return book;
	  }
	  
	  
	  
	  @PutMapping("/{num}")
	  public @ResponseBody void BookCount(@RequestBody Book book) {
		  System.out.println("책 개수 수정 기능");
		  mapper.bookCount(book);
		  System.out.println(mapper.toString());
	  }


}
